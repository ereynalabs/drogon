/**
* @copyright Copyright (C) 2025, Ereyna Labs Ltd. - All Rights Reserved
* @file [[fileName]].cc
* @parblock
* This file is subject to the terms and conditions defined in file 'LICENSE.md',
* which is part of this source code package.  Proprietary and confidential.
* @endparblock
* @author Dave Linten <david@ereynalabs.com>
*/

#include "[[fileName]].h"
#include <string>

<%c++
auto namespaceVector=@@.get<std::vector<std::string>>("namespaceVector");
std::string namespaceStr;
for(auto &name:namespaceVector)
{
    namespaceStr.append(name);
    namespaceStr.append("::");
}
if(!namespaceStr.empty())
{
    namespaceStr.resize(namespaceStr.length()-2);
    $$<<"using namespace "<<namespaceStr<<";\n";
}
std::string indentStr(@@.get<std::string>("className").length(), ' ');
%>

void [[className]]::getOne(const HttpRequestPtr &req,
     {%indentStr%}         std::function<void(const HttpResponsePtr &)> &&callback,
     {%indentStr%}         std::string &&id)
{
}

void [[className]]::get(const HttpRequestPtr &req,
     {%indentStr%}      std::function<void(const HttpResponsePtr &)> &&callback)
{
}
void [[className]]::create(const HttpRequestPtr &req,
     {%indentStr%}         std::function<void(const HttpResponsePtr &)> &&callback)
{
}
void [[className]]::updateOne(const HttpRequestPtr &req,
     {%indentStr%}            std::function<void(const HttpResponsePtr &)> &&callback,
     {%indentStr%}            std::string &&id)
{
}

/*
void [[className]]::update(const HttpRequestPtr &req,
     {%indentStr%}         std::function<void(const HttpResponsePtr &)> &&callback)
{

}*/

void [[className]]::deleteOne(const HttpRequestPtr &req,
     {%indentStr%}            std::function<void(const HttpResponsePtr &)> &&callback,
     {%indentStr%}            std::string &&id)
{
}
